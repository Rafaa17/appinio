/* tslint:disable */
/* eslint-disable */
/**
 * Appinio API
 * Appinio API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreatePostRequestDto
 */
export interface CreatePostRequestDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePostRequestDto
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePostRequestDto
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof CreatePostRequestDto
     */
    'insights': string;
}
/**
 * 
 * @export
 * @interface PostDto
 */
export interface PostDto {
    /**
     * 
     * @type {number}
     * @memberof PostDto
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'uuid': string;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'insights': string;
    /**
     * 
     * @type {number}
     * @memberof PostDto
     */
    'userId': number;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof PostDto
     */
    'updatedAt': string;
}
/**
 * 
 * @export
 * @interface RegisterRequestDto
 */
export interface RegisterRequestDto {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequestDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface SignInRequestDto
 */
export interface SignInRequestDto {
    /**
     * 
     * @type {string}
     * @memberof SignInRequestDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof SignInRequestDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface SignInResponseDto
 */
export interface SignInResponseDto {
    /**
     * 
     * @type {string}
     * @memberof SignInResponseDto
     */
    'accessToken': string;
    /**
     * 
     * @type {string}
     * @memberof SignInResponseDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof SignInResponseDto
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface SummarizePostRequestDto
 */
export interface SummarizePostRequestDto {
    /**
     * 
     * @type {string}
     * @memberof SummarizePostRequestDto
     */
    'content': string;
}
/**
 * 
 * @export
 * @interface SummarizePostResponseDto
 */
export interface SummarizePostResponseDto {
    /**
     * 
     * @type {string}
     * @memberof SummarizePostResponseDto
     */
    'summary': string;
    /**
     * 
     * @type {string}
     * @memberof SummarizePostResponseDto
     */
    'insights': string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreatePostRequestDto} createPostRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromPostsController: async (createPostRequestDto: CreatePostRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createPostRequestDto' is not null or undefined
            assertParamExists('createFromPostsController', 'createPostRequestDto', createPostRequestDto)
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPostRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllFromPostsController: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/posts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHelloFromAppController: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerFromAuthController: async (registerRequestDto: RegisterRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequestDto' is not null or undefined
            assertParamExists('registerFromAuthController', 'registerRequestDto', registerRequestDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignInRequestDto} signInRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInFromAuthController: async (signInRequestDto: SignInRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signInRequestDto' is not null or undefined
            assertParamExists('signInFromAuthController', 'signInRequestDto', signInRequestDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SummarizePostRequestDto} summarizePostRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summarizeTextFromPostsController: async (summarizePostRequestDto: SummarizePostRequestDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'summarizePostRequestDto' is not null or undefined
            assertParamExists('summarizeTextFromPostsController', 'summarizePostRequestDto', summarizePostRequestDto)
            const localVarPath = `/posts/summarize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(summarizePostRequestDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreatePostRequestDto} createPostRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createFromPostsController(createPostRequestDto: CreatePostRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createFromPostsController(createPostRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createFromPostsController']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async findAllFromPostsController(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PostDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.findAllFromPostsController(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.findAllFromPostsController']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getHelloFromAppController(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getHelloFromAppController(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getHelloFromAppController']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async registerFromAuthController(registerRequestDto: RegisterRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.registerFromAuthController(registerRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.registerFromAuthController']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SignInRequestDto} signInRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInFromAuthController(signInRequestDto: SignInRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInFromAuthController(signInRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.signInFromAuthController']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SummarizePostRequestDto} summarizePostRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async summarizeTextFromPostsController(summarizePostRequestDto: SummarizePostRequestDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SummarizePostResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.summarizeTextFromPostsController(summarizePostRequestDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.summarizeTextFromPostsController']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {CreatePostRequestDto} createPostRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createFromPostsController(createPostRequestDto: CreatePostRequestDto, options?: any): AxiosPromise<PostDto> {
            return localVarFp.createFromPostsController(createPostRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        findAllFromPostsController(options?: any): AxiosPromise<Array<PostDto>> {
            return localVarFp.findAllFromPostsController(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getHelloFromAppController(options?: any): AxiosPromise<void> {
            return localVarFp.getHelloFromAppController(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterRequestDto} registerRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        registerFromAuthController(registerRequestDto: RegisterRequestDto, options?: any): AxiosPromise<SignInResponseDto> {
            return localVarFp.registerFromAuthController(registerRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignInRequestDto} signInRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInFromAuthController(signInRequestDto: SignInRequestDto, options?: any): AxiosPromise<SignInResponseDto> {
            return localVarFp.signInFromAuthController(signInRequestDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SummarizePostRequestDto} summarizePostRequestDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        summarizeTextFromPostsController(summarizePostRequestDto: SummarizePostRequestDto, options?: any): AxiosPromise<SummarizePostResponseDto> {
            return localVarFp.summarizeTextFromPostsController(summarizePostRequestDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {CreatePostRequestDto} createPostRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createFromPostsController(createPostRequestDto: CreatePostRequestDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createFromPostsController(createPostRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public findAllFromPostsController(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).findAllFromPostsController(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getHelloFromAppController(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getHelloFromAppController(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterRequestDto} registerRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public registerFromAuthController(registerRequestDto: RegisterRequestDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).registerFromAuthController(registerRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignInRequestDto} signInRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signInFromAuthController(signInRequestDto: SignInRequestDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signInFromAuthController(signInRequestDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SummarizePostRequestDto} summarizePostRequestDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public summarizeTextFromPostsController(summarizePostRequestDto: SummarizePostRequestDto, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).summarizeTextFromPostsController(summarizePostRequestDto, options).then((request) => request(this.axios, this.basePath));
    }
}



